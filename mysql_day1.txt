
源码版MySQL

5.5之前的版本安装过程

源码版 安装过程比较麻烦，要求技术水平高，但能自己去定制需要的功能，生产环境下有功能需求的话尽量使用这种版本

编译参数简单介绍

./configure --help  > /root/Desktop/mysqlconfigure.help

		--prefix  安装软件的家目录
		--enable-assembler 使用字符函数的汇编版本。
		--enable-profiling 建立一个版本的剖析代码查询
		--enable-local-infile 允许外部表格数据导入到数据库
		--with-charset  字符集  mysql大概支持30多种字符集
		--with-collation  字符的校验规则，mysql大概支持80多种
		--with-extra-charsets 扩展字符集
		--with-server-suffix 数据库头名，  -max mysql发布有新特性，还没有通过正式的测试，主要用来提升用户的认识
		--with-pthread 线程库
		--with-unix-socket-path	socket接口路径
		--with-tcp-port	端口 
		--with-mysqld-user	运行mysql的系统用户
		--with-libwrap	支持tcp_trapper
		--without-debug	关闭debug信息，mysql数据库会产生一些debug调试信息，对性能有一定的影响，如果不需要这种信息，可以用此参数关闭
		--with-mysqld-ldflags  
  	--with-client-ldflags 静态编译可以把性能提高5%到10%
		--with-low-memory  支持低内存，避免内存限制
		--with-mysqlmanager 多启动的管理器
		--with-big-tables	支持大表

	定义存储引擎的支持的相关参数：
		--with-example-storage-engine
		--with-archive-storage-engine
		--with-csv-storage-engine
		--with-blackhole-storage-engine
		--with-ndbcluster 
		--with-federated-storage-engine

--在5.1之后，存储引擎做成插件式存储引擎，使用--with-plugins参数来指定编译进去的存储引擎


编译前准备：
安装开发工具和开发库这两个组
yum源安装：
中文系统安装：
# yum groupinstall "开发工具" "开发库"

英文系统安装：
# yum groupinstall "Development tools" -y

再安装编译用到的工具和依赖包：
# yum install gcc gcc-c++ ncurses-devel perl  


查看CPU信息，CPU大小和内存大小，会影响到编译的速度。
cat /proc/cpuinfo 


解压源码包mysql
# tar xf mysql/mysql-5.1.72.tar.gz -C /usr/src
# cd /usr/src/mysql-5.1.72/

配置
# ./configure --prefix=/usr/local/mysql --enable-assembler --enable-profiling --enable-local-infile --with-charset=gbk --with-extra-charsets=utf8,gb2312 --with-pthread  --with-mysqld-ldflags=-all-static --with-client-ldflags=-all-static --with-low-memory --with-big-tables --with-plugins=myisam,innobase,ndbcluster --with-mysqlmanager

编译
# make 

编译安装
# make install

# ls /usr/local/mysql/	--编译完成后这个目录就有了
bin    lib      mysql-test  sql-bench
docs  include  libexec  share

第一步：手动编写配置文件
# mkdir /usr/local/mysql/etc	--建立一个存放配置文件的目录
# vim /usr/local/mysql/etc/my.cnf	--编写my.cnf

[mysqld]
port=3307
datadir=/data/mysql51
socket=/data/mysql51/mysql51.socket
pid-file=/var/run/mysqld/mysql51.pid

log=/var/log/mysqld/mysql51.log
log-error=/var/log/mysqld/mysqld51.log

[client]
socket=/data/mysql51/mysql5.socket

第二步：建立配置文件里所写的相关目录，并修改相应的权限
# mkdir /data/mysql51   /var/run/mysqld/  /var/log/mysqld
# chown -R mysql.mysql /data/mysql51  /var/log/mysqld /var/run/mysqld/ /usr/local/mysql/ 


第三步：配置服务脚本  
# cp /usr/src/mysql-5.1.72/support-files/mysql.server  /etc/init.d/mysql51	--拷贝服务脚本模版到正确的位置

# vim /etc/init.d/mysql51  --修改使之指向新编写的配置文件
47  datadir=/data/mysql51
218 conf=/usr/local/mysql/etc/my.cnf	--修改这句

# chmod 755 /etc/init.d/mysql51  --给服务脚本加执行权限

第四步：初始化数据库，第一次都需要初始化
# /usr/local/mysql/bin/mysql_install_db --datadir=/data/mysql51/ --user=mysql --basedir=/usr/local/mysql51

如果本机有装rpm版的mysql则：/usr/local/mysql/bin/mysql_secure_installation 命令不执行，如果无则执行

第五步：启动服务，并登录
/etc/init.d/mysql5  start

如果没有拷服务脚本，则用下面的命令来启动
# /usr/local/mysql/bin/mysqld_safe --defaults-file=/usr/local/mysql/etc/my.cnf &

# /usr/local/mysql/bin/mysql   --登陆验证


报错解决：
# ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock' (111)
--上面找不到socket文件，因为我编译时没有把下面这个参数指定，所以默认找/tmp/mysql.sock
--with-unix-socket-path

# /usr/local/mysql/bin/mysql --socket=/data/mysql51/mysql5.socket 	
--现在登录需要指定socket文件的位置，要想不指定，可以按下面方法做

登录时不指定socket的方法：
在配置文件/usr/local/mysql/etc/my.cnf下加上如下一段
[client]
socket=/data/mysql51/mysql5.socket


# /usr/local/mysql/bin/mysql   --再次登录就不需要指定socket文件了

--为了登录方便（输入/usr/local/mysql/bin/mysql太长)，可以用下面的方法来做，然后使用mysql5这个命令来登录
# cp /usr/local/mysql/bin/mysql /bin/mysql5

关闭mysql的方法:
--因为不太建议用服务脚本去start或者stop,所以关闭方法可以用他自带的管理命令mysqladmin去shutdown 
/usr/local/mysql/bin/mysqladmin shutdown  -p  --有密码就加-p接密码，没密码就不用加-p


====================================================================================================================

		↑ 以上内容为老版本的安装方法，目前主要使用5.5以上版本，需要了解的自己看 ↑ 					
					
====================================================================================================================


5.5之后的版本安装过程

编译前三个切记：
1、切记一定安装软件依赖
2、切记一定要学会看报错信息
3、切记一定要学会自己查资料（官方文档，百度搜索等等）


mysql-5.6.26的源码版的安装方法

编译前准备：
安装开发工具和开发库这两个组
yum源安装：
中文系统安装：
# yum groupinstall "开发工具" "开发库"

英文系统安装：
# yum groupinstall "Development tools" -y

再安装编译用到的工具和依赖包：
# yum install gcc gcc-c++ ncurses-devel perl  


查看CPU信息，CPU大小和内存大小，会影响到编译的速度。
cat /proc/cpuinfo 

下载路径为：
http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.26.tar.gz/from/http://mysql.mirror.rafal.ca/

MySQL5.5版本之后，编译的选项同样众多，DBA可以通过# cmake . -LH 查看支持的参数，或者浏览下列页面：http://dev.mysql.com/doc/refman/5.6/en/source-configuration-options.html，查看编译时可指定参数的详细描述。

一些常用参数如下：

    * CMAKE_INSTALL_PREFIX：指定MySQL程序的安装目录，默认/usr/local/mysql
    * DEFAULT_CHARSET：指定服务器默认字符集，默认latin1
    * DEFAULT_COLLATION：指定服务器默认的校对规则，默认latin1_general_ci
    * ENABLED_LOCAL_INFILE：指定是否允许本地执行LOAD DATA INFILE，默认OFF
    * WITH_COMMENT：指定编译备注信息
    * WITH_xxx_STORAGE_ENGINE：指定静态编译到mysql的存储引擎，MyISAM，MERGE，MEMBER以及CSV四种引擎默认即被编译至服务器，不需要特别指定。
    * WITHOUT_xxx_STORAGE_ENGINE：指定不编译的存储引擎
    * SYSCONFDIR：初始化参数文件目录
    * MYSQL_DATADIR：数据文件目录
    * MYSQL_TCP_PORT：服务端口号，默认3306
    * MYSQL_UNIX_ADDR：socket文件路径，默认/tmp/mysql.sock 

开始编译安装：
# tar xf mysql-5.6.26.tar.gz -C /usr/src/
# cd /usr/src/mysql-5.6.26/						--mysql5.5以后的编译方法不一样

# yum install cmake -y   --mysql5.5之后的版本需要cmake(c语言编译器）来进行编译安装

# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql56 -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS=gbk,gb2312 -DENABLED_LOCAL_INFILE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 

# make && make install


安装后

第一步：手动编写my.cnf配置文件
# mkdir /usr/local/mysql56/etc
# vim /usr/local/mysql56/etc/my.cnf

[mysqld]
port=3307
datadir=/data/mysql56
pid-file=/var/run/mysqld/mysql56.pid
socket=/data/mysql56/mysql56.socket
log-error=/var/log/mysqld/mysql56-err.log
user=mysql

[client]
socket=/data/mysql56/mysql56.socket


第二步：创建相关目录，并修改权限
# mkdir  /data/mysql56 /var/run/mysqld /var/log/mysqld 
# chown -R mysql.mysql  /data/mysql56 /var/run/mysqld /var/log/mysqld /usr/local/mysql56/   


第三步：初始化数据库
# cd /usr/local/mysql56
# /usr/local/mysql56/scripts/mysql_install_db --datadir=/data/mysql56/ --user=mysql --basedir=/usr/local/mysql56


第四步：启动服务，看是否登录OK
# /usr/local/mysql56/bin/mysqld_safe --defaults-file=/usr/local/mysql56/etc/my.cnf &	--启动方法

也可以：
# /usr/local/mysql56/bin/mysqld --user=mysql --basedir=/usr/local/mysql56 --datadir=/data/mysql56 --defaults-file=/usr/local/mysql56/etc/my.cnf &

# /usr/local/mysql56/bin/mysql 				--登录命令

# cp /usr/local/mysql56/bin/mysql /usr/bin/mysql56	--如果你觉得上面的命令太长，可以拷贝到/usr/bin里改名为mysql56，以后就使用mysql56这个命令来启动就方便很多了

也可以将mysql安装目录下的bin目录加入到环境变量中（如果有多版本mysql，不推介此做法）：
# export PATH=$PATH:/usr/local/mysql56/bin

# vim /etc/profile
export PATH=$PATH:/usr/local/mysql56/bin		-- 在文件末尾添加一行内容


--如果需要服务脚本的支持，则做下列操作
cp /usr/local/mysql56/support-files/mysql.server  /etc/init.d/mysql56	  --拷贝服务启动脚本模版 

# vim /etc/init.d/mysql56		-- 找到以下几行，并修改为你实际的路径
basedir=/usr/local/mysql56
datadir=/data/mysql56

conf=/usr/local/mysql56/etc/my.cnf	

# /etc/init.d/mysql56 start  --启动服务

# chkconfig --add mysql56 	--将mysql添加进自启动列表

# chkconfig mysql56 		--将mysql设置为开机自启动	


至此，源码版mysql安装完成

备注：--defaults-file=mysqlconf		--指定mysql主配置路径

********************************************************************************************************************

关于mysql数据库启动问题的排错：
熟悉上面五步，一般是权限问题，参数是否写错，空间是否满

重新初始化数据库；如果还不能启动，查看一下进程，是否有进程卡死

使用下面命令去查看配置文件写否有误；如果没有报错，则表示OK，并会把数据库的所有参数和对应的值给打印出来
/usr/local/mysql/libexec/mysqld --verbo --help

====================================================================================================================


****************************************************************************************************************
注意：多版本mysql可能导致服务在查找配置文件时产生混乱，从而导致某些参数指定后一样无法生效甚至导致服务无法启动
****************************************************************************************************************

二进制版本安装：

下载：
# wget -P /root/ https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.23-linux-glibc2.12-x86_64.tar.gz

解压：
# tar xf /root/mysql-5.7.23-linux-glibc2.12-x86_64.tar.gz -C /usr/local/
mv /usr/local/mysql-5.7.23-linux-glibc2.12-x86_64 /usr/local/mysql57		--也可使用ln设置一个软链接


创建配置文件：
-- 注意，多版本mysql时配置文件一定要分开存放，所有文件名称不能重名，如果要指定端口号也不能与其它版本冲突
# vim /usr/local/mysql57/etc/my.cnf		
[client]
socket=/var/run/mysqld/mysql57.sock

[mysqld]
user=mysql
datadir=/data/mysql57
pid-file=/var/run/mysqld/mysql57.pid
socket=/var/run/mysqld/mysql57.sock
log_error=/var/log/mysqld/mysql57_err.log

[mysqld_safe]
pid-file=/var/run/mysqld/mysql57.pid
socket=/var/run/mysqld/mysql57.sock


创建相关目录
# mkdir -p /data/mysql57 /var/run/mysqld /var/log/mysqld

修改目录所属用户和组
# chwon -R mysql.mysql /data/mysql57 /var/run/mysqld /var/log/mysqld

初始化数据库
# /usr/local/mysql57/bin/mysql_install_db --insecure --user=mysql --basedir=/usr/local/mysql57 --datadir=/data/mysql57

启动数据库
# /usr/local/mysql57/bin/mysqld --user=mysql --basedir=/usr/local/mysql57 --datadir=/data/mysql57 --defaults-file=/usr/local/mysql57/etc/my.cnf &

也可按下方办法进行启动脚本配置：

拷贝mysql启动脚本
	# cp /usr/local/mysql57/support-files/mysql.server /etc/init.d/mysql57

	修改配置文件内容
	# vim /etc/init.d/mysql57
	datadir=/data/mysql57
	basedir=/usr/local/mysql57

	conf=/usr/local/mysql76/etc/my.cnf

[/etc/init.d/mysql76 start] or [service mysql57 start]

登录5.7版本mysql
# /usr/local/mysql57/bin/msyql		
ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)		--如果看到这种报错，说明当前mysql已经启用了密码

# cat /root/.mysql__secret
	# Password set for user 'root@localhost' at 2018-09-17 23:52:56 
	ptrx#jR5?bgP						--这一句就是mysql默认的密码

修改mysql默认密码	
# /usr/local/mysql57/bin/mysqladmin -uroot -p passwrod "123"	--将mysql密码修改为"123"
Enter password:"ptrx#jR5?bgP"					--输入你查询到的密码

# /usr/local/mysql57/bin/mysql -p123
mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| log                |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
5 rows in set (0.00 sec)

		

====================================================================================================================

my.cnf参数参考大全

# MySql5.7配置文件my.cnf设置
[client]
port = 3306
socket = /tmp/mysql.sock


[mysqld]
###############################基础设置#####################################
#Mysql服务的唯一编号 每个mysql服务Id需唯一
server-id = 1


#服务端口号 默认3306
port = 3306


#mysql安装根目录
basedir = /opt/mysql


#mysql数据文件所在位置
datadir = /opt/mysql/data


#临时目录 比如load data infile会用到
tmpdir  = /tmp


#设置socke文件所在目录
socket  = /tmp/mysql.sock


#主要用于MyISAM存储引擎,如果多台服务器连接一个数据库则建议注释下面内容
skip-external-locking


#只能用IP地址检查客户端的登录，不用主机名
skip_name_resolve = 1


#事务隔离级别，默认为可重复读，mysql默认可重复读级别（此级别下可能参数很多间隙锁，影响性能）
transaction_isolation = READ-COMMITTED


#数据库默认字符集,主流字符集支持一些特殊表情符号（特殊表情符占用4个字节）
character-set-server = utf8mb4


#数据库字符集对应一些排序等规则，注意要和character-set-server对应
collation-server = utf8mb4_general_ci


#设置client连接mysql时的字符集,防止乱码
init_connect='SET NAMES utf8mb4'


#是否对sql语句大小写敏感，1表示不敏感
lower_case_table_names = 1


#最大连接数
max_connections = 400
#最大错误连接数
max_connect_errors = 1000


#TIMESTAMP如果没有显示声明NOT NULL，允许NULL值
explicit_defaults_for_timestamp = true


#SQL数据包发送的大小，如果有BLOB对象建议修改成1G
max_allowed_packet = 128M


#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭
#MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效
interactive_timeout = 1800
wait_timeout = 1800


#内部内存临时表的最大值 ，设置成128M。
#比如大数据量的group by ,order by时可能用到临时表，
#超过了这个值将写入磁盘，系统IO压力增大
tmp_table_size = 134217728
max_heap_table_size = 134217728



#禁用mysql的缓存查询结果集功能
#后期根据业务情况测试决定是否开启
#大部分情况下关闭下面两项
query_cache_size = 0
query_cache_type = 0



##----------------------------用户进程分配到的内存设置BEGIN-----------------------------##
##每个session将会分配参数设置的内存大小
#用于表的顺序扫描，读出的数据暂存于read_buffer_size中，当buff满时或读完，将数据返回上层调用者
#一般在128kb ~ 256kb,用于MyISAM
#read_buffer_size = 131072
#用于表的随机读取，当按照一个非索引字段排序读取时会用到，
#一般在128kb ~ 256kb,用于MyISAM
#read_rnd_buffer_size = 262144
#order by或group by时用到
#建议先调整为2M，后期观察调整
sort_buffer_size = 2097152
#一般数据库中没什么大的事务，设成1~2M，默认32kb
binlog_cache_size = 524288
##---------------------------用户进程分配到的内存设置END-------------------------------##


#在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中
#官方建议back_log = 50 + (max_connections / 5),封顶数为900
back_log = 130


############################日  志 设置##########################################
#数据库错误日志文件
log_error = error.log


#慢查询sql日志设置
slow_query_log = 1
slow_query_log_file = slow.log
#检查未使用到索引的sql
log_queries_not_using_indexes = 1
#针对log_queries_not_using_indexes开启后，记录慢sql的频次、每分钟记录的条数
log_throttle_queries_not_using_indexes = 5
#作为从库时生效,从库复制中如何有慢sql也将被记录
log_slow_slave_statements = 1
#慢查询执行的秒数，必须达到此值可被记录
long_query_time = 8
#检索的行数必须达到此值才可被记为慢查询
min_examined_row_limit = 100


#mysql binlog日志文件保存的过期时间，过期后自动删除
expire_logs_days = 5


############################主从复制 设置########################################
#开启mysql binlog功能
log-bin=mysql-bin
#binlog记录内容的方式，记录被操作的每一行
binlog_format = ROW
#对于binlog_format = ROW模式时，减少记录日志的内容，只记录受影响的列
binlog_row_image = minimal


#master status and connection information输出到表mysql.slave_master_info中
master_info_repository = TABLE
#the slave's position in the relay logs输出到表mysql.slave_relay_log_info中
relay_log_info_repository = TABLE


#作为从库时生效,想进行级联复制，则需要此参数
log_slave_updates


#作为从库时生效,中继日志relay-log可以自我修复
relay_log_recovery = 1


#作为从库时生效,主从复制时忽略的错误
slave_skip_errors = ddl_exist_errors


##---redo log和binlog的关系设置BEGIN---##
#(步骤1) prepare dml相关的SQL操作，然后将redo log buff中的缓存持久化到磁盘
#(步骤2)如果前面prepare成功，那么再继续将事务日志持久化到binlog
#(步骤3)如果前面成功，那么在redo log里面写上一个commit记录
#当innodb_flush_log_at_trx_commit和sync_binlog都为1时是最安全的，
#在mysqld服务崩溃或者服务器主机crash的情况下，binary log只有可能丢失最多一个语句或者一个事务。
#但是都设置为1时会导致频繁的io操作，因此该模式也是最慢的一种方式。
#当innodb_flush_log_at_trx_commit设置为0，mysqld进程的崩溃会导致上一秒钟所有事务数据的丢失。
#当innodb_flush_log_at_trx_commit设置为2，只有在操作系统崩溃或者系统掉电的情况下，上一秒钟所有事务数据才可能丢失。
#commit事务时,控制redo log buff持久化磁盘的模式 默认为1
innodb_flush_log_at_trx_commit = 2
#commit事务时,控制写入mysql binlog日志的模式 默认为 0
#innodb_flush_log_at_trx_commit和sync_binlog都为1时，mysql最为安全但性能上压力也是最大
sync_binlog = 1
##---redo log 和 binlog的关系设置END---##


############################Innodb设置##########################################
#数据块的单位8k，默认是16k，16kCPU压力稍小，8k对select的吞吐量大
#innodb_page_size的参数值也影响最大索引长度，8k比16k的最大索引长度小
#innodb_page_size = 8192
#一般设置物理存储的60% ~ 70%
innodb_buffer_pool_size = 1G


#5.7.6之后默认16M
#innodb_log_buffer_size = 16777216
#该参数针对unix、linux，window上直接注释该参数.默认值为NULL
#O_DIRECT减少操作系统级别VFS的缓存和Innodb本身的buffer缓存之间的冲突
innodb_flush_method = O_DIRECT


#此格式支持压缩, 5.7.7之后为默认值
innodb_file_format = Barracuda


#CPU多核处理能力设置，假设CPU是2颗4核的，设置如下
#读多，写少可以设成2:6的比例
innodb_write_io_threads = 4
innodb_read_io_threads = 4


#提高刷新脏页数量和合并插入数量，改善磁盘I/O处理能力
#默认值200（单位：页）
#可根据磁盘近期的IOPS确定该值
innodb_io_capacity = 500


#为了获取被锁定的资源最大等待时间，默认50秒，超过该时间会报如下错误:
# ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction
innodb_lock_wait_timeout = 30


#调整buffer pool中最近使用的页读取并dump的百分比,通过设置该参数可以减少转储的page数
innodb_buffer_pool_dump_pct = 40


#设置redoLog文件所在目录, redoLog记录事务具体操作内容
innodb_log_group_home_dir = /opt/mysql/redolog/


#设置undoLog文件所在目录, undoLog用于事务回滚操作
innodb_undo_directory = /opt/mysql/undolog/


#在innodb_log_group_home_dir中的redoLog文件数, redoLog文件内容是循环覆盖写入。
innodb_log_files_in_group = 3


#MySql5.7官方建议尽量设置的大些，可以接近innodb_buffer_pool_size的大小
#之前设置该值较大时可能导致mysql宕机恢复时间过长，现在恢复已经加快很多了
#该值减少脏数据刷新到磁盘的频次
#最大值innodb_log_file_size * innodb_log_files_in_group <= 512GB,单文件<=256GB
innodb_log_file_size = 1024M


#设置undoLog文件所占空间可以回收
#5.7之前的MySql的undoLog文件一直增大无法回收
innodb_undo_log_truncate = 1
innodb_undo_tablespaces = 3
innodb_undo_logs = 128


#5.7.7默认开启该参数 控制单列索引长度最大达到3072
#innodb_large_prefix = 1


#5.7.8默认为4个, Inodb后台清理工作的线程数
#innodb_purge_threads = 4


#通过设置配置参数innodb_thread_concurrency来限制并发线程的数量，
#一旦执行线程的数量达到这个限制，额外的线程在被放置到对队列中之前，会睡眠数微秒，
#可以通过设定参数innodb_thread_sleep_delay来配置睡眠时间
#该值默认为0,在官方doc上，对于innodb_thread_concurrency的使用，也给出了一些建议:
#(1)如果一个工作负载中，并发用户线程的数量小于64，建议设置innodb_thread_concurrency=0；
#(2)如果工作负载一直较为严重甚至偶尔达到顶峰，建议先设置innodb_thread_concurrency=128,
###并通过不断的降低这个参数，96, 80, 64等等，直到发现能够提供最佳性能的线程数
#innodb_thread_concurrency = 0


#强所有发生的死锁错误信息记录到error.log中，之前通过命令行只能查看最近一次死锁信息
innodb_print_all_deadlocks = 1


############################其他内容 设置##########################################
[mysqldump]
quick
max_allowed_packet = 128M
[mysql]
no-auto-rehash
[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 256k
read_buffer = 2M
write_buffer = 2M
[mysqlhotcopy]
interactive-timeout
[mysqld_safe]
#增加每个进程的可打开文件数量.
open-files-limit = 28192




